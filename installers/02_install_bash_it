#!/usr/bin/env bash
#_______________________________________________________________________________
#
# (c) 2016 Konstantin Gredeskoul
# https://github.com/kigster
#
# For project Pullulant
# https://github.com/kigster/pullulant/
#
# MIT License
#_______________________________________________________________________________
#

function install_bash_it() {
  last_command_status=0
  [[ -d ${bash_it_home} && -n "${opts_force}" ]] && run "rm -rf ${bash_it_home}"

  [[ ! -d ${bash_it_home} ]] && {
    run "git clone https://github.com/bash-it/bash-it.git ${bash_it_home}"
    run "rm -f ~/.bash_profile.bak"
    run "cd ${bash_it_home} && echo 'n'| ./install.sh && cd -"
  }

  [[ -n "${bash_it_aliases}"     ]] && bash_it_component "enable" "alias"       $bash_it_aliases
  [[ -n "${bash_it_plugins}"     ]] && bash_it_component "enable" "plugin"      $bash_it_plugins
  [[ -n "${bash_it_completions}" ]] && bash_it_component "enable" "completion"  $bash_it_completions

  install_bash_it_prompt
  update_bashrc
  use_newer_bash
}

function update_bashrc() {
  [[ -z "$(grep bashrc ~/.bash_profile)" ]] && {
    run "echo 'appending sourcing of ~/.bashrc to .bash_profile...'"
    run "echo 'source ~/.bashrc' >> ~/.bash_profile"
  }
  [[ -n "$(egrep '%PU_HOME%' $HOME/.bashrc)" ]] && run "sed -i.bak -e 's:%PU_HOME%:${pu_home}:g' $HOME/.bashrc"
}

function install_bash_it_prompt() {
  [[ -z "$(egrep 'export BASH_IT_THEME="?powerline' $HOME/.bash_profile)" && \
     -z "$(egrep 'bash_it_prompt_theme' $HOME/.bash_profile)" ]] && \

     sed -i.bak -E \
     's/^export BASH_IT_THEME="?.*$/[[ -s \$HOME\/.bash_it_prompt_theme ]] \&\& export BASH_IT_THEME=\$(cat \$HOME\/.bash_it_prompt_theme)\nexport BASH_IT_THEME=\${BASH_IT_THEME:-\"powerline-multiline\"}/g' $HOME/.bash_profile
}

function use_newer_bash() {
  local newer_bash=$(which /usr/local/bin/bash)
  [[ -z "${newer_bash}" ]] && return
  [[ -z "$(grep ${newer_bash} /etc/shells)" ]] && {
    run "echo ${newer_bash} | sudo tee -a /etc/shells >/dev/null # show-stdout"
  }

  local current_shell=$(finger ${USER} | grep Shell | awk 'BEGIN{FS="Shell: "}{print $2}')
  if [[ "${current_shell}" != "${newer_bash}" && -s "${newer_bash}" ]] ; then
    run "sudo chsh -s ${newer_bash} ${USER}"
  fi
}

function bash_it_component() {
  local args=($*)
  local action=$1
  local what=$2
  local list=${args[@]:2}
  declare -a preinstalled=($(ls -1  $HOME/.bash_it/$what*/enabled/ 2>/dev/null | sed "s/\.${what}.*\.bash//g" | tr '\n' ' '))
  echo "found $what(es) ${#preinstalled[@]} pre-installed"
  for item in ${list[@]}; do
    already_there=$(pu-array-contains-element $item "${preinstalled[@]}")
    if [[ "${already_there}" == "false" ]]; then
      run "bash -l -c 'bash-it $action $what $item'"
    fi
  done
}
