#!/usr/bin/env bash
# vim:ft=bash

_git_checkout() {
  __git_has_doubledash && return
  case "$cur" in
  -conflict=*)
    __gitcomp "diff3 merge" "" "${cur##.conflict=}"
    ;;
  -*)
    __gitcomp_builtin checkout
    ;;
  *)
    local flags="-track -no-track -no-guess" track_opt="-track"
    if [ "$GIT_COMPLETION_CHECKOUT_NO_GUESS" = "1" ] || [ -n "$(__git_find_on_cmdline "$flags")" ]; then
      track_opt=''
    fi
    __git_complete_refs "${track_opt}"
    ;;
  esac
}

function gpr() {
  git.smart.pull "$@"
}

function __git_complete() {
  local wrapper="__git_wrap${2}"
  eval "$wrapper () { __git_func_wrap $2 ; }"
  complete -o bashdefault -o default -o nospace -F "${wrapper}" "$1" 2>/dev/null || complete -o default -o nospace -F "${wrapper}" "$1"
}

function git.completions() {

  local dir="/usr/local/etc/bash_completion.d"
  local file="${dir}/git-completion.bash"

  if [[ -f ${file} ]]; then
    source "${file}"

    # Add git completion to aliases
    __git_complete g __git_main
    __git_complete gco _git_checkout
    __git_complete gm _git_merge
    __git_complete gp _git_push
    __git_complete gpr _git_rebase
    __git_complete gc _git_commit
  fi

  __git_complete gco _git_checkout
}

# Usage: -git.ensure-arguments 'argument name', $1
.git.ensure-arguments() {
  if [[ -z "$2" ]]; then
    printf "\n${bldred}This function requires an argument: ${bldylw}%s${clr}\n" "$1"
    return 1
  fi
  return 0
}

function git.commit-and-push() {
  -git.ensure-arguments 'git commit message' "$1" || return 1
  set -x
  git commit -m "$1"
  shift
  set +x 1>/dev/null 2>&1
  printf "\n${bldgrn}About to do git push... You can 1 second to Ctrl-C...${clr}\n"
  sleep 1
  set -x
  git push "$@"
  set +x 1>/dev/null 2>&1
}

function git.commit() {
  -git.ensure-arguments 'git commit message' "$1" || return 1
  printf "\n${bldgrn}Adding any locally modified files..${clr}\n"
  set -x
  git add -
  set +x 1>/dev/null 2>&1
  printf "\n${bldylw}About to commit and push. You have 1 second to Ctrl-C...${clr}\n"
  sleep 1
  gcmp "$@"
}

function git.squash() {
  number=${1}
  [[ -z ${number} ]] && {
    echo "Usage: git.squash <number> # of commits to go back"
    return
  }
  git reset -soft HEAD~"${number}"
  git commit
}

function git.upstream() {
  local this_branch=$(gcb)
  this_branch=${this_branch:-main}
  git branch -set-upstream-to=origin/"${this_branch}" "${this_branch}"
}

# @description: git glone from current user's github repo. Also aliased to 'gcl'
# @example git.clone ruby-web # assumign $USER == "wanelo"
function git.clone() {
  local repo=$1
  local who=${2:-${USER}}
  local folder=${3}
  [[ -z "$repo" ]] && {
    printf "${bldwht}Usage: gcl repo [github-username] [folder]${txtrst}\n"
    printf "${bldwht}   OR: gcl username/repo${txtrst}\n\n"
    printf "${bldgrn}   eg: gcl project ${txtrst}\n"
    printf "${bldgrn}   eg: gcl project kigster${txtrst}\n"
    printf "${bldgrn}   eg: gcl kigster/project ${txtrst}\n"
    return
  }

  [[ ${repo} =~ '/' ]] && full_repo="git@github.com:${repo}"
  [[ ${repo} =~ '/' ]] || full_repo="git@github.com:${who}/${repo}"

  git clone "${full_repo}" "${folder}"
  [[ $? != 0 ]] && printf "${bldred}can't clone ${bldgrn}${full_repo}${txtrst}\n" >&2
}

function __reset_terminal() {
  reset
  echo "Resetting terminal..."
}

function git.clean() {
  local lib=${PU_HOME}/lib/pu-interaction
  if [[ -d ${PU_HOME} && -f ${lib} ]]; then
    source "${lib}"
    printf "${bldgrn}Doing a dry-run first:${txtrst}\n"
    git clean -d -f -x -n
    trap "reset" SIGINT
    pu-ask-user 'You sure? [y/N]?' 10 'n' 'y n'
    if [[ "${pu_ask_user_answer}" =~ "y" ]]; then
      printf "${bldgrn}\nOK, removing files... !${bldylw}\n"
      printf "${txtblu}"
      git clean -d -f -x
    else
      printf "\n${bldred}No worries, I am not sure either..${txtrst}\n"
    fi
    printf "${txtrst}"
  fi
}

git.completions
