#!/usr/bin/env bash
#
##-----------------------------------------------------------------------------
##    function: pg.data [psql connection params, default is us -U postgres]
##     returns: data directory of the running server
##

pg.data() {
  local psql_flags=${*:-"-U postgres"}
  psql -XA ${psql_flags} -c 'show data_directory' | egrep -v 'data_directory|row'
}

pg.top.94() {

  [[ -z "${DB}" ]] && {
    echo "please set DB variable to psql args for your connection"
    return 1
  }

  local clear=0
  local interval=1

  set +e

  while :; do
    case $1 in
      -h|-\?|--help)
          shift
          printf "usage: ${bldgrn}db.top [ -i/--interval <secs> ]\n"
          printf "              [ -c/--clear ]  [ -- psql flags ]${txtrst}\n"
          printf "   eg: ${bldblu}db.top -i 1 -c -- -x${txtrst}\n"
          return
          ;;
      -c|--clear)
          shift
          clear=1
          ;;
      -i|--interval)
          shift
          if [[ -n "$1" ]]; then
              local interval=$1
              shift
          else
              printf 'ERROR: "--interval" requires a non-empty option argument.\n' >&2
              return 1
          fi
          ;;
      --)              # End of all options.
          shift
          break
          ;;
      -?*)
          printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
          exit 127
          shift
          ;;
      *)  # Default case: If no more options then break out of the loop.
          break
          shift
    esac
  done

  psql_flags=$*

  i=0

  # temp output file
  local tof="$(mktemp -d "${TMPDIR:-/tmp/}.XXXXXXXXXXXX")/.db.top.$$"
  touch ${tof}
  while true; do
    i=$(($i + 1 ))
    cp /dev/null ${tof}
    printf "${bakblu}${bldwht}$(date), screen #${i}${txtrst}\n\n"  >> ${tof}

    printf "${bldylw}  ➔  Queries:\n\n${bldgrn}" >> ${tof}
    psql -X -P pager ${DB} ${psql_flags} -c "select pid,client_addr || ':' || client_port as client,state, now() - query_start as duration,substring(query for 100) as query from pg_stat_activity where state != 'idle' order by query_start " | egrep -v 'select.*client_addr' | sed 's/-/—/g;s/+/•/g;' >> ${tof}
    printf "${bldwht}Press Ctrl-C to quit.${txtrst}\n" >> ${tof}
    (( $clear )) || printf "\033c"
    cat ${tof}
    sleep ${interval}
  done
}

pg.top() {
  local clear=0
  local interval=3

  while :; do
    case $1 in
      -h|-\?|--help)
          shift
          printf "usage: ${bldgrn}pg.top [ -i/--interval <secs> ]\n"
          printf "              [ -c/--clear ]  [ -- psql flags ]${txtrst}\n"
          printf "   eg: ${bldblu}pg.top -i 1 -c -- -x${txtrst}\n"
          return
          ;;
      -c|--clear)
          shift
          clear=1
          ;;
      -i|--interval)
          shift
          if [[ -n "$1" ]]; then
              local interval=$1
              shift
          else
              printf 'ERROR: "--interval" requires a non-empty option argument.\n' >&2
              return 1
          fi
          ;;
      --)              # End of all options.
          shift
          break
          ;;
      -?*)
          printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
          exit 127
          shift
          ;;
      *)  # Default case: If no more options then break out of the loop.
          break
          shift
    esac
  done

  psql_flags=$*

  i=0
  while true; do
    i=$(($i + 1 ))
    printf "${bakblu}${bldwht}$(date), screen #${i}${txtrst}\n\n"

    printf "${bldylw}  ➔  Queries:\n\n${bldgrn}"
    psql -X -U postgres -P pager ${psql_flags} -c "select pid,client_addr || ':' || client_port as client,wait_event_type,wait_event,state,now() - query_start as duration,substring(query for 100) as query from pg_stat_activity where state != 'idle' order by query_start " | egrep -v 'select.*client_addr' | sed 's/-/—/g;s/+/•/g;'
    printf "${bldylw}  ➔  Locks\n\n${bldblu}"
    psql -X -U postgres -P pager ${psql_flags} -c "select wait_event_type,wait_event,state,pid,now() - query_start as duration, client_addr || ':' || client_port as client,substring(query for 80) as query from pg_stat_activity where wait_event is not null or wait_event_type is not null" | egrep -v 'select.*client_addr' | sed 's/-/—/g;s/+/•/g;'
    printf "${bldwht}Press Ctrl-C to quit.${txtrst}\n"
    sleep ${interval}
    (( $clear )) && clear
    (( $clear )) || printf "\n\n\n\n"
  done
}

pg.s() {
  name=${1}
  shift
  local psql_flags=${*:-"-U postgres"}
  [[ -z ${name} ]] && {
    printf "${bldred}error: please provide the name of the query\n"
    printf "${bldgrn}usage: pg.q <select-query-name> [psql flags]\n"
    printf "${bldgrn}       where query name is from ~/.psqlrc\n"
    printf "${bldgrn}   eg: ${bldblu}pg.q locks -U appuser${txtrst}\n"
    return
  }
  psql -X ${psql_flags} -P pager -c "$(pg.rc.query ${name} | head -1)"
}

pg.rc.query() {
  grep $* ~/.psqlrc | sed "s/''/'/g" | awk -F select  '/select/ { print FS, substr($2, 1, length($2)-1) }'
}

pg.ss.install() {
  local conf="$(pg.data)/postgresql.conf"
  if [[ -s ${conf} ]]; then
    if [[ -z $(egrep '^shared_preload_libraries' ${conf} | grep pg_stat_statements) ]]; then
      printf "${bldylw}Appending settings to ${txtpur}${conf}...\n"
      printf "\nshared_preload_libraries = 'pg_stat_statements'\n" | sudo cat >> ${conf}
      if [[ -n $(brew services list | grep postgresql | grep started) ]] ; then
        printf "${bldylw}Restarting PostgreSQL...${txtrst}\n"
        brew services restart postgresql
      fi
    fi
  fi
}
