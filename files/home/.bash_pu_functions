#!/usr/bin/env bash

mem() {
  pattern=$1
  shift
  ps -e -orss,vsz,args $*| egrep "RSS|${pattern}" | addup --units Mb -n 1024 1 2
}

addup() {
  local addup_debug=0
  while :; do
    case $1 in
      -h|-\?|--help)
          shift
          local addup__help=1
          ;;
      -d|--debug)
          shift
          addup__debug=1
          ;;
      -u|--units)
          shift
          if [[ -n "$1" ]]; then
              local addup__units=$1
              shift
          else
              printf 'ERROR: "--units" requires a non-empty option argument.\n' >&2
              return 1
          fi
          ;;

      -n|--denominator)
          shift
          if [ -n "$1" ]; then
              local addup__denominator=$1
              shift
          else
              printf 'ERROR: "--denominator" requires a non-empty option argument.\n' >&2
              exit 1
          fi
          ;;

      -m|--multiplier)
          shift
          if [ -n "$1" ]; then
              local addup__multiplier=$1
              shift
          else
              printf 'ERROR: "--multiplier" requires a non-empty option argument.\n' >&2
              exit 1
          fi
          ;;
      --)              # End of all options.
          shift
          break
          ;;
      -?*)
          printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
          exit 127
          shift
          ;;
      *)  # Default case: If no more options then break out of the loop.
          break
          shift
    esac
  done

  [[ -n $addup_help ]] && {
    printf "${bldylw}usage:   ${bldgrn}addup [ options ] col1 col2 ....${txtrst}\n"
    printf "${bldylw}options:${txtrst} \n"
    printf "    -h/--help                   print help\n"
    printf "    -d/--debug                  print debugging info in awk\n"
    printf "    -u/--units             str  set units to display next to the numbers\n"
    printf "    -m/--multiplier          M  specifies multiplier coefficient for each column's sum\n"
    printf "    -n/--denominator         N  specifies denominator for each addup__cols's sum\n"
    echo
    printf "${bldylw}example:${txtrst} \n"
    printf "    ps -orss,vsz,args | addup --units Gb -n \$((1024*1024)) 1 2\n\n"
    return
  }

  local addup__cols=$@

  [[ -n ${DEBUG} ]] && printf "addup__cols argument: ${addup__cols[*]}\n"

  for col in ${addup__cols[@]}; do
    [[ $col =~ ^[0-9]+$ ]] || {
      printf "usage: ${bldgrn}some command | ${bldblu}addup ${bldylw}<column number> [, <column number>, ... ]${txtrst}\n"
      printf "   eg: ps -orss,vsz,args | grep ruby | addup -u Mb -m 1024 1 2\n"
      exit
    }
  done

  awk -v columns="${addup__cols[*]}" \
      -v denominator="${addup__denominator}" \
      -v multiplier="${addup__multiplier}" \
      -v units="${addup__units}" \
      -v debug="${addup__debug}" \
      -f ~/.pu_addup.awk <&0
}


pu::convert() {
  local from_ext=$1
  shift
  local to_ext=$1
  shift
  if [[ "$*" =~ "--" ]]; then
    printf "${bldred}Whoops!${txtrst} Did you specify arguments to convert via --option? \n"
    printf "All arguments to convert ${bldblu}must have a single dash!.${txtrst}\n"
    return
  fi

  if [[ -z "${from_ext}" || -z ""${to_ext}"" ]]; then
    printf "usage: ${bldgrn}pu::img::convert from-extension to-extension [options-to-convert]${txtrst}\n"
    printf "       Works only in the current directory, and is non-recursive, case-sensitive.\n\n"
    printf "   eg: ${bldblu}img::convert png jpg --quality 100${txtrst}\n"
    return
  fi

  for f in $(find . -type f -name "*.${from_ext}" -depth 1 -print); do
    local to_file=$(printf "${f}" | sed -E "s/(.*)\.${from_ext}/\1.${to_ext}/g")
    [[ -z ${to_file} ]] && {
      echo "to_file is nil, can not convert from $f"
      return
    }
    [[ -z ${f} ]] && {
      echo "file is nil, can not convert"
      return
    }
    if [[ -s ${to_file} ]]; then
      printf "${bldylw}Found existing file ${to_file}, aborting.\n"
      return
    fi
    convert $* $f $to_file
    result=$?
    if [[ $result != 0 ]]; then
      printf "${bldred}convert exited with status $result, aborting...${txtrst}\n"
      return
    fi

    fsize=$(pu::fsize $f)
    tsize=$(pu::fsize $to_file)
    ratio=$(ruby -e "printf '%7.2f', 100.0 * ${tsize} / ${fsize}")
    if [[ $fsize -gt $tsize ]]; then
      action=" decrease"
    elif [[ $fsize -lt $tsize ]]; then
      action=" increase"
    else
      action="no change"
    fi
    printf "${bldylw} [size $ratio%% ${action}] converted ${bldblu}$f ${bldgrn}$to_file ${bldpur}$*  ${txtrst}\n"
  done
}

pu::fsize() {
  ls -al $1  | cut -d ' ' -f 8
}

function jpg2bmp {
  dir=
  if [ ! -z "$1" ]; then
    dir="$1/"
  fi
  for file in `ls -1 *.JPG *.jpg`; do
    echo converting $file...
    name=$(openssl rand -hex 4 | tr 'a-z' 'A-Z')
    convert $file ${dir}${name}.BMP
  done
}

function hashbmp {
  for file in `ls -1 *.bmp *.BMP`; do
    echo converting $file...
    name="$( md5 -q $file | cut -c 1-8).bmp"
    mv $file $name
  done
}

function console {
  modem=`ls -1 /dev/cu.* | grep -vi bluetooth | tail -1`
  baud=${1:-9600}
  if [ ! -z "$modem" ]; then
    minicom -D $modem  -b $baud
  else
    echo "No USB modem device found in /dev"
  fi
}

# Choose the best editor to open a MarkDown file (or any other text file)
# Override array $mkd_editors[@] if your priority list is different
function mkd() {
  [[ -n "${mkd_editors}" ]] || declare -a mkd_editors=("byword" "mate" "atom" "vim")
  for editor in "${mkd_editors[@]}"; do
    if [[ -n "$(type $editor | grep function)" || -n "$(which $editor)" ]]; then
      $editor $*
      break
    fi
  done
}

function byword() {
  [[ -n "${byword_app}" ]] || byword_app="/Applications/Byword.app"
  if [[ -d ${byword_app} ]]; then
    open $byword_app $*
  else
    [[ "$(which mate)" && $(mate "$*") ]] || vim "$*"
  fi
}

function watch() {
  local refresh=1
  [[ "$1" =~ [0-9] ]] && refresh=$1 && shift
  cmd=$@
  while true; do
    printf "${bakblk}${bldblu}$(date) | ${bldwht}command: ${bldgrn}${cmd[@]}"
    printf "\033[K"
    printf "${txtrst}\n\n"
    time ${cmd[@]}
    sleep $refresh
    clear
  done
}
