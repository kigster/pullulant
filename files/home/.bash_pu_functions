#!/usr/bin/env bash

# Returns result of find operation that works for files and folder
# with spaces.
files::ls() { 
  local pattern="$1"
  [[ -z "${pattern}" ]] && return
  while IFS= read -d $'\0' -r file ; do
    echo "${file}"
  done < <(find . -iname "${pattern}" -print0)
}

files::ls::mp3() {
  array::ls '*.mp3'
}

function diskspace() {
  printf "Calculating disk space under:\n${bldblu}$(pwd)${clr}:\n"

  printf "${txtgrn}"
  du -H -d 1 | \
    sed 's/\.\///g' | \
    sort -n | \
    awk '{printf "%20.20s: %12.0f Mb\n", $2, ($1/1024/1024)}' | \
    egrep -v ' .:'

  printf "${clr}\n"
}

## "kit" functions are meant to be passed as a second argument to rename().
# They provide various pre-defined renaming patterns.
better-sed() {
  [[ $(which gsed) ]] && { printf $(which gsed); return ; }
  [[ $(which sed)  ]] && { printf $(which sed); return ; }
}

__sed() { better-sed; }

__rename::kit::add-test::func() { echo "$1" | __sed -E 's/\.rb/_test.rb/g';  }
rename::kit::add-test()         { rename "$1" "__rename::kit::add-test::func" ; }

__rename::kit::add-spec::func() { echo "$1" | __sed -E 's/\.rb/_spec.rb/g';  }
rename::kit::add-spec()         { rename "$1" "__rename::kit::add-spec::func" ; }

## rename() helpers
rename::do()           { 
  [[ -n ${DEBUG} ]] && rename::print "${1}" "${2}"
  [[ -n ${DEBUG} ]] || rename::mv "${1}" "${2}"
}

rename::print()         { printf "moving ${bldgrn}%-70.70s\n    ➜ ${bldylw}%-70.70s${clr}\n" "${1}" "${2}"; }

rename::mv()            { 
  local from="$1"
  local to="$2"
  
  [[ ! -f "${from}" ]] && {
    printf "${bldred}Source file ${from} does not exists.\n"
    return 1
  }

  [[ -f "${to}" ]] && {
    printf "${bldred}Destination file ${to} already exists.\n"
    return 2
  }

  [[ -z "${to}" ]] && {
    printf "${bldred}Destination file appears to be blank.\n"
    return 3
  }

  printf ${txtblu};
  mv "${from}" "${to}"
  code=$?; printf ${clr}
  
  [[ ${code} -ne 0 ]] && {
    printf "${bldred}Command mv exited with status ${code}\n"
    rename::error "${from}" "${to}"
    return 4
  }
  
  rename::print "${from}" "${to}"
  return 0
}

rename::error() {
  local from="$1"
  local to="$2"
  
  printf "${bldred}An error occurred while attempting to move\n"
  printf "   source file: ${bldylw}${from}${bldred}\n"
  printf "   destination: ${bldpur}${to}${clr}.\n\n"
}

##-----------------------------------------------------------------------------
## description: finds and renames all files in a current folder recursively,
##              using a custom bash function for replacing each name
##
##    function: rename <find file pattern> <match regex> <replace regex>
##          or: rename <find file pattern> <single-file rename bash function>
##          eg: 
##              rename::kit::add-test() { echo $1 | sed 's/\.rb/_test.rb/g';  }
##              rename '*.rb' rename::kit::add-test
rename() {
  local pattern="$1"
  local match="$2"
  local replace="$3"
  local sedflags=${4:-"g"}
  local newname
  
  local find_command="-print"
  
  local _sed=$(__sed)

  [[ ${pattern} =~ '*' ]] || pattern="*${pattern}"

  readarray -t file_array <<< $(files::ls "${pattern}")
  printf "${bldblu}✅  discovered ${#file_array} files matching ${bldylw}${pattern}\n\n"

  if [[ -n $(type "${match}" 2>/dev/null) ]] ; then
    for file in "${file_array[@]}"; do
      rename::mv "${file}" $(${match} "${file}")
    done
  elif [[ -n "${match}" && -n "${replace}" ]] ; then
    for file in "${file_array[@]}"; do
      newname=$(echo "${file}" | sed -E "s#${match}#${replace}#${sedflags}")
      rename::mv "${file}" "${newname}"
    done
  else
    printf "${bldred}Invalid usage.${clr}

${bldpur}USAGE:${clr}    
 
    ${bldgrn}rename 'pattern' 'replace-argument-bash-function'
    ${bldgrn}rename 'pattern' 'find regex' 'replace regex' [ 'sed flags' ]

${bldpur}DESCRIPTION:${clr}    
    There are two ways to use this function:
  
    1. Using a BASH function that receives a single file name, and must 
       output the expected renamed version. 

    2. By passing three arguments: file search pattern that's passed to 
       'find', regular expression defining what we are replacing, and 
       finally the replace part. If you have 'gsed' in the PATH, it will 
       be used the by default. Otherwise, regular 'sed' is used with -E flag. 
       In this mode, any fourth argument (if provided) replaces the default
       flag 'g' used in, eg. ${bldylw}sed -E 's/bash/zsh/${bldgrn}g'${clr}.

${bldpur}EXAMPLES:${clr}    

    ${bldylw}1. BASH Function Example
    ${bldblk}# first define a function that insert '_test' into the argument
    passed to it, but only if it ends with '.rb'.

        \$ ${bldgrn}append_test() { echo \$1 | sed 's/\.rb/_test.rb/g';  }

    ${bldylw}Next, we call rename and pass both the file search pattern and
    the bash function neme.

        \$ ${bldgrn}rename '*.rb' append_test

    ${bldylw}2. SED expression 
    ${bldblk}# Similar to the above, the following will append '-cd1' to 
    every mp3 file in the current directory, recursively.
    
        \$ ${bldgrn}rename '*.mp3' '\.mp3' '-cd1.mp3'


${bldpur}LICENSE:${clr}    
    MIT 

"

  fi
}


##-----------------------------------------------------------------------------
##    function: mem [egrep pattern] [ -U user[,..] | -g group[,..]
##                                                 | -p pid[,...] ]
##          eg: mem Chrome
##                      5116 Mb   RSS
##                    165788 Mb   VSZ
##              # addup all ruby processes for user saves
##          eg: mem ruby -U saves
##
## description:
##              mem helper uses system 'ps' command to add up the memory (in Mb)
##              for either all processes (the default) or the processes that
##              match an optional pattern (first argument), among either all
##              processes (default), or narrowed down by one or more flags
##              that sysmte 'ps' command understands, such as '-U user'.
##              Note: any number of arguments for 'ps' are allowed.
##
mem() {
  local pattern=
  if [[ ${1:0:1} != '-' ]]; then
    pattern=$1
    shift
  fi
  local scope='-e'
  [[ -n ${1} && ${1:0:1} == '-' ]] && {
    scope=$*
  }
  local filter=
  if [[ -n ${pattern} ]] ; then
    ps -orss,vsz,args ${scope} | egrep "RSS|${pattern}" | grep -v grep | addup --units Mb -n 1024 1 2
  else
    ps -orss,vsz,args ${scope} | grep -v grep | addup --units Mb -n 1024 1 2
  fi
}

#..................................................................................
#
#    function: <command> | addup [--units 'name' ] [-n | -d value] column_number, ...
#          eg: ps -e -orss,vsz,args $* | addup --units Mb -n 1024 1 2
#         see: mem
#        note: try 'addup --help
#
# description:
#              Lower level command that is meant to be used by higher abstractions.
#              Adds up values in columns, optionally displaying the headers.
#
#              This function will sum up any specified columns from the multi-column
#              STDIN, and can divide or multiply the result by an optional coefficient.
#              Specify units with -u, eg. "Mb" or "Gb", etc.
#
#     depends: requires the supporting AWK script "~/.addup.awk" to be installed.
#
addup() {
  local addup_debug=0
  while :; do
    case $1 in
      -h|-\?|--help)
          shift
          local addup__help=1
          ;;
      -d|--debug)
          shift
          addup__debug=1
          ;;
      -u|--units)
          shift
          if [[ -n "$1" ]]; then
              local addup__units=$1
              shift
          else
              printf 'ERROR: "--units" requires a non-empty option argument.\n' >&2
              return 1
          fi
          ;;

      -n|--denominator)
          shift
          if [ -n "$1" ]; then
              local addup__denominator=$1
              shift
          else
              printf 'ERROR: "--denominator" requires a non-empty option argument.\n' >&2
              exit 1
          fi
          ;;

      -m|--multiplier)
          shift
          if [ -n "$1" ]; then
              local addup__multiplier=$1
              shift
          else
              printf 'ERROR: "--multiplier" requires a non-empty option argument.\n' >&2
              exit 1
          fi
          ;;
      --)              # End of all options.
          shift
          break
          ;;
      -?*)
          printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
          exit 127
          shift
          ;;
      *)  # Default case: If no more options then break out of the loop.
          break
          shift
    esac
  done

  [[ -n $addup_help ]] && {
    printf "${bldylw}usage:   ${bldgrn}addup [ options ] col1 col2 ....${txtrst}\n"
    printf "${bldylw}options:${txtrst} \n"
    printf "    -h/--help                   print help\n"
    printf "    -d/--debug                  print debugging info in awk\n"
    printf "    -u/--units             str  set units to display next to the numbers\n"
    printf "    -m/--multiplier          M  specifies multiplier coefficient for each column's sum\n"
    printf "    -n/--denominator         N  specifies denominator for each addup__cols's sum\n"
    echo
    printf "${bldylw}example:${txtrst} \n"
    printf "    ps -orss,vsz,args | addup --units Gb -n \$((1024*1024)) 1 2\n\n"
    return
  }

  local addup__cols=$@

  [[ -n ${DEBUG} ]] && printf "addup__cols argument: ${addup__cols[*]}\n"

  for col in ${addup__cols[@]}; do
    [[ $col =~ ^[0-9]+$ ]] || {
      printf "usage: ${bldgrn}some command | ${bldblu}addup ${bldylw}<column number> [, <column number>, ... ]${txtrst}\n"
      printf "   eg: ps -orss,vsz,args | grep ruby | addup -u Mb -m 1024 1 2\n"
      exit
    }
  done

  awk -v columns="${addup__cols[*]}" \
      -v denominator="${addup__denominator}" \
      -v multiplier="${addup__multiplier}" \
      -v units="${addup__units}" \
      -v debug="${addup__debug}" \
      -f ~/.pu_addup.awk <&0
}


pu::convert() {
  local from_ext=$1
  shift
  local to_ext=$1
  shift
  if [[ "$*" =~ "--" ]]; then
    printf "${bldred}Whoops!${txtrst} Did you specify arguments to convert via --option? \n"
    printf "All arguments to convert ${bldblu}must have a single dash!.${txtrst}\n"
    return
  fi

  if [[ -z "${from_ext}" || -z ""${to_ext}"" ]]; then
    printf "usage: ${bldgrn}pu::img::convert from-extension to-extension [options-to-convert]${txtrst}\n"
    printf "       Works only in the current directory, and is non-recursive, case-sensitive.\n\n"
    printf "   eg: ${bldblu}img::convert png jpg --quality 100${txtrst}\n"
    return
  fi

  for f in $(find . -type f -name "*.${from_ext}" -depth 1 -print); do
    local to_file=$(printf "${f}" | sed -E "s/(.*)\.${from_ext}/\1.${to_ext}/g")
    [[ -z ${to_file} ]] && {
      echo "to_file is nil, can not convert from $f"
      return
    }
    [[ -z ${f} ]] && {
      echo "file is nil, can not convert"
      return
    }
    if [[ -s ${to_file} ]]; then
      printf "${bldylw}Found existing file ${to_file}, aborting.\n"
      return
    fi
    convert $* $f $to_file
    result=$?
    if [[ $result != 0 ]]; then
      printf "${bldred}convert exited with status $result, aborting...${txtrst}\n"
      return
    fi

    fsize=$(pu::fsize $f)
    tsize=$(pu::fsize $to_file)
    ratio=$(ruby -e "printf '%7.2f', 100.0 * ${tsize} / ${fsize}")
    if [[ $fsize -gt $tsize ]]; then
      action=" decrease"
    elif [[ $fsize -lt $tsize ]]; then
      action=" increase"
    else
      action="no change"
    fi
    printf "${bldylw} [size $ratio%% ${action}] converted ${bldblu}$f ${bldgrn}$to_file ${bldpur}$*  ${txtrst}\n"
  done
}

file.size() {
  ls -al $* | awk '{print $5}'
}

jpg.bmp() {
  dir=
  if [ ! -z "$1" ]; then
    dir="$1/"
  fi
  for file in `ls -1 *.JPG *.jpg`; do
    echo converting $file...
    name=$(openssl rand -hex 4 | tr 'a-z' 'A-Z')
    convert $file ${dir}${name}.BMP
  done
}

function hashbmp {
  for file in `ls -1 *.bmp *.BMP`; do
    echo converting $file...
    name="$( md5 -q $file | cut -c 1-8).bmp"
    mv $file $name
  done
}

function console {
  modem=`ls -1 /dev/cu.* | grep -vi bluetooth | tail -1`
  baud=${1:-9600}
  if [ ! -z "$modem" ]; then
    minicom -D $modem  -b $baud
  else
    echo "No USB modem device found in /dev"
  fi
}

# Choose the best editor to open a MarkDown file (or any other text file)
# Override array $mkd_editors[@] if your priority list is different
md.edit() {
  [[ -n "${mkd_editors}" ]] || declare -a mkd_editors=("byword" "mate" "atom" "vim")
  for editor in "${mkd_editors[@]}"; do
    if [[ -n "$(type $editor | grep function)" || -n "$(which $editor)" ]]; then
      $editor $*
      break
    fi
  done
}

byword() {
  [[ -n "${byword_app}" ]] || byword_app="/Applications/Byword.app"
  if [[ -d ${byword_app} ]]; then
    open $byword_app $*
  else
    [[ "$(which mate)" && $(mate "$*") ]] || vim "$*"
  fi
}

# similar to 'watch'
observe() {
  local refresh=1
  [[ "$1" =~ [0-9] ]] && refresh=$1 && shift
  cmd=$@
  while true; do
    printf "${bakblk}${bldblu}$(date) | ${bldwht}command: ${bldgrn}${cmd[@]}"
    printf "\033[K"
    printf "${txtrst}\n\n"
    time ${cmd[@]} sleep $refresh
    clear
  done
}


today() {
  date '+%Y-%m-%d'
}

now() {
  date '+%Y-%m-%d.%H:%M:%S'
}

# Replace a string in a provided file, eg:
# replf ~/.bashrc "s/\/Users\/kig/\/Users\/dev/s"
replf() {
  local file=$1
  local regex=$2
  sed -i -e "${regex}" $file
}

# Replace a text string in all files in the directory
# defaults to ".":
# eg. repld "s/\/Users\/kig/\/Users\/dev/s"
#
# but can be changed with the second argument.
# eg. repld "s/\/Users\/kig/\/Users\/dev/s" ~/
repld(){
  local regex=${1}
  local dir=${2:-"."}
  echo find ${dir} -type f -exec sed -i -e "'${regex}'" {} \; -print
  find ${dir} -type f -exec sed -i -e "${regex}" {} \; -print
}


[[ $(uname -s ) != 'Darwin' ]] && return

function see() {
  qlmanage -p $* 2>/dev/null
}

osx.hostname() {
  local host=$*
  [[ -z $host ]] && {
    echo "usage: osx.hostname desired-host-name"
    return
  }

  echo setting ComputerName to $host...
  sudo scutil --set ComputerName $host

  localhost=$(echo $host | sed -E 's/\..*$//g')

  echo setting LocalHostName to $localhost...
  sudo scutil --set LocalHostName ${localhost}

  echo setting HostName to $host...
  sudo scutil --set HostName $host
}


function csr.create() { 
  local name=$1
  if [[ -z $name ]] ; then
    echo 'usage: scr::create site.domain.com'
    exit 1
  fi

  openssl req -new -newkey rsa:2048 -nodes -keyout $name.key -out $name.csr
}




