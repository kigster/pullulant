#!/usr/bin/env bash
#_______________________________________________________________________________
#
# © 2016 Konstantin Gredeskoul
# Project Pullulant™
# https://github.com/kigster/pullulant/
#
# Distributed under MIT License
#_______________________________________________________________________________
#
source "${bash_files_dir}/.bash_colors"

function pu-screen-width {
  stty -a | grep columns | awk '{print $6}'
}

function pu-width {
  echo -n "80"
}

function pu-repeat-char {
  local char=${1:0:1}
  char=${char:- }
  local width=${2:-$(pu-width)}
  for i in {0..1000}; do
    [[ $i -ge ${width} ]] && break
    printf "$char"
  done
}

function pu-line {
  pu-repeat-char "─"
}

function pu-sep {
  pu-line
  printf "\n"
}

# set background color to something before calling this
function pu-bar {
  pu-repeat-char " "
  printf "${txtrst}\n"
}

function pu-clean {
  local text="$*"
  printf "$text" | ruby -npe 'gsub(/\e\[[;m\d]+/, "")'
}

function pu-box-separator {
  printf "├"
  pu-line
  printf "┤${txtrst}\n"
}
function pu-box-top {
  printf "┌"
  pu-line
  printf "┐${txtrst}\n"
}
function pu-box-bottom {
  printf "└"
  pu-line
  printf "┘${txtrst}\n"
}
function pu-box-header {
  local text="$*"
  local clean_text=$(pu-clean "$text")
  local width=$(pu-width)
  local remaining_space_len=$(($width - ${#clean_text} - 1))
  printf "│ ${text}"
  [[ $remaining_space_len -gt 0 ]] && pu-repeat-char " " $remaining_space_len
  printf "│${txtrst}\n"
}


function pu-print-section-header {
  local header_color=$1
  shift
  [[ -n "${opts_suppress_headers}" ]] && return
  printf "\n${header_color}"
  pu-box-top
  printf "${header_color}"
  pu-box-header "$*"
  printf "${header_color}"
  pu-box-bottom
  printf "${txtrst}\n"
}

function pu-cursor-left {
  local cols=$1
  printf "\033[${cols}D"
}

function pu-cursor-right {
  local cols=$1
  printf "\033[${cols}C"
}

function pu-underline-header {
  local title="$*"
  local width=80
  printf "${undylw}%s" "$title"
  local remaining=$(($width - ${#title}))
  printf "%*s${txtrst}\n" $remaining " "
}

function pu-indent-list {
  local list="$1"
  local width="$2"
  local indent="$3"
  echo "$list" | fold -sw $width | sed -E "s/ /, /g; s/(^|$)/${indent}/g; "
}

function pu-git-revision {
  git log --pretty=oneline --abbrev-commit | head -1 | awk '{print $1}'
}

function pu-long-header {
  pu-box-top
  pu-box-header "${txtgrn}Pullulant ${txtrst} (or just ${bldgrn}pu${txtrst})                       ${bldwht}(Version $(cat VERSION)) ${txtylw}Git Rev: $(pu-git-revision)${txtrst} "
  pu-box-separator
  pu-box-header "${bldblu}OS-X Installer for Web Devs, MIT License  | (c) 2015-2016 Konstantin Gredeskoul${txtrst}"
  pu-box-header "${bldblu}https://github.com/kigster/pullulant      |                       http://kig.re${txtrst}"
  pu-box-bottom
}

function pu-short-header {
  printf "${txtrst}"
  pu-box-top
  pu-box-header "${bldgrn}Pullulant ${bldred} ✩ ${txtrst} (or gently: 'pu')                             ${txtblk}${bakpur} Version ${bakblu} $(cat VERSION) ${bakpur}"
  pu-box-bottom
}


function pu-installers-helpers {
  local installer_list=$(pu-indent-list "$installers" 65 "   ")
  local helper_list=$(pu-indent-list    "$helpers"    65 "   ")

  printf "                                                                                    \n"
  printf "${txtrst}Installers:\n"
  printf "${txtylw}%-68s \n" "$installer_list"
  printf "                                                                                    \n"
  printf "${txtrst}Helpers:\n"
  printf "${txtylw}%-68s \n" "$helper_list"
  printf "                                                                                    \n"

  pu-list-current-runners
}

function pu-list-current-runners {
  linebreak="\n"
  local run_list=$(pu-indent-list "$runners"    65 '   ')
  if [ ! -z "$(echo $run_list | sed 's/[ \n]//g')" ]; then
    printf "${txtrst}Runner List:\n"
    printf "${bldgrn}%-68s ${txtrst}\n" "$run_list"
  fi
}

function pu-list-features {
  source "lib/pu-features"

  linebreak="\n"
  local run_list=$(pu-indent-list "$(pu-features| tr '\n' ' ')"    65 '   ')
  run_list="$run_list"
  if [ ! -z "$(echo $run_list | sed 's/[ \n]//g')" ]; then
    printf "${txtrst}Feature List:\n"
    printf "${txtylw}%-68s ${txtrst}\n" "$run_list"
  fi
  printf "${bakgrn}"
  pu-bar
}

function pu-welcome-screen-short {
  pu-long-header
  printf "\n${txtrst}"
}

function pu-short-usage {
  printf "
Usage:
  pu  [ -R | -r 'runner runner ...' ] [ -s 'runner runner ... ']
      [ -F | -f 'feature feature ...' ]
      [ -BCFHIKLNPRSTUZhiklmnopqtvy]
      [ -e 'expression']

Eg.
  pu -l                           # list all available runners
  pu -t                           # list all available features
  pu -RF                          # install all runners/features
  pu -r homebrew -f ruby          # install homebrew with ruby specific packages
"
}

function pu-short-help {
  printf "
Help:
  pu -H | -x                      # complete help with examples
  pu -h

"
}

function pu-print-help {

  pu-short-usage
  printf "
$(pu-underline-header 'Getting Help: ')

  -h          paginated help message in full color
  -H          non-paginated help message in full color
  -x          non-paginated help message in pure ASCII
  -D          show advanced usage with expressions
  -d          show remaining runners after each runner
  -E          show usage examples

$(pu-underline-header "Runners:")

  Runners are modules that do certain work, i.e. install software, or remove it.
  They are located in two folders: ./helpers and ./installers and are divided
  logically into 'Helpers' and 'Installers' correspondingly. NOTE: each
  runner is a bash script with a bash function matching scripts name.

  ${bldgrn}Installers${txtrst}  are the modules that install something new and
              are to be included in the list of a complete install. They are
              ordered. For example 'install_ruby' installs ruby and dependencies.
              To run ALL installers, use the -a flag.

  ${bldgrn}Helpers${txtrst}     are similar to installers, except they are not run as
              part of the full install. They must be invoked by name directly.
              Because of that, helpers tend to be more diverse in nature: some
              uninstall things, fix things, and so on.

  But collectively, helpers and installers are just 'runners' and are the 'units'
  of pullulant's magical universe...

  -R          full install: executes each runner from the './installers' dir

  -r 'runner runner ...'
              run specific installer(s) and/or helper(s) in the provided order

  -s 'runner runner ...'
              skip a specific installer otherwise included with either -R or -r

  -l          list available installers and helpers

$(pu-underline-header 'Runner-specific Flags:')

  -S          [S]proutwrap is disabled during the full install
  -B          [B]rew-upgrade is disabled during the full install
  -P          No backu[P] for rsync of bash and zsh files (default is to backup)
  -k          When installing ruby's NOKOGIRI library, do NOT set
              NOKOGIRI_USE_SYSTEM_LIBRARIES to 1 when -k is set
  -m          When installing iTerm themes, prefer the small selection of
              listed color schemes, instead of installing the entire set.

$(pu-underline-header 'Features:')

  ${bldgrn}Features${txtrst}    are a set of brew packages, bash-it plug-ins, completions
              and aliases, defined a particular theme. For example, ruby feature
              enables bash aliases and completions releated to all ruby
              development tools. It also adds a ruby-specific set of brew
              formulas and casks — such as RubyMine IDE, etc.

  -f 'feature feature ....'
              Merge packages from a provided set of features.
  -F          Merge ALL available features, currently:
              ${bldpur}$(echo $(pu-features))${txtrst}
  -t          List available features

$(pu-underline-header 'Error Handing:')

              Default error handling is pessimistic: installer stops upon any
              error code returned from a single 'run' statement.
              You can control error handling at two levels:

  -i          [i]gnore errors and continue to the next 'run' statement.

  -I          Stops running the current installer that produced an error, skips
              the rest of it, and continues to the next installer. For example,
              in this mode, if one homebrew package fails to install, the rest
              of homebrew installer will be skipped, and the next installer in
              the run list will begin.

$(pu-underline-header 'Homebrew:')

  -o          f[o]rce – applies to some installers, ie. brew (--force) and
              zsh (overwrites current shell to ZSH). Also some rsync
              installers may behave differently with -f.

              -C -F -L flags allow picking specific subset of the install.
              The flags can mix. Adding all three is the same as adding none.

  -L          Only [L]ink packages configured for brew linking
  -C          Only [C]asks are installed from a configured list
  -U          Only form[U]las are installed from a configured list

              These apply to all brew commands:
  -y          [R]einstall each formulae during brew install
  -K          Relin[K] all brew formulas/casks during install

$(pu-underline-header 'Zsh')

  -Z          Change the default shell to ZSH and install 'oh-my-zsh'

$(pu-underline-header 'Interaction and Output Control:')

  -N          run some parts interactively, letting user confirm install
  -p          su[p]press pretty section headers for more compact output
  -q          [q]uiet mode: stop printing commands before and after run.
  -v          [v]erbose - show each command's output, and add -v to some
  -n          dry-ru[n] – print commands, but don't actually run them.
"
}

function pu-help-examples {

  printf "
$(pu-underline-header 'Examples: ')

  ● Run a complete installer using a union of all available features with
    default output and error handling options:

      ${bldgrn}$(basename $0) -RF${txtrst}

  ● Install everything with the default (small) set of packages, but
    with an interactive check:

      ${bldgrn}$(basename $0) -RN${txtrst}

  ● Install everything with specific features and plugins enabled suitable for
    ruby, python and node development, as well as install services used in web
    development such as nginx, haproxy, etc:

      ${bldgrn}$(basename $0) -R -f 'ruby python nodejs web aws docker'${txtrst}

  ● Use a helper (not an installer) to wipe clean and reinstall postgresql
    from brew, create a new UTF8 database, and ensure it's running after:

      ${bldgrn}$(basename $0) -r reinstall-postgres${txtrst}

  ● Wipe and reinstall homebrew, and install ruby-specific packages:

      ${bldgrn}$(basename $0) -r 'brew-wipe homebrew' -f ruby${txtrst}

  ● Repair homebrew, and install additional python packages:

      ${bldgrn}$(basename $0) -r 'brew-repair homebrew' -f python${txtrst}

  ● When installing brew packages, install formUlas only (-U), use --force (-o),
    and show verbose output (-v) without section headers (-p):

      ${bldgrn}$(basename $0) -r homebrew -o -U -p -v${txtrst}

  ● Install everything, minus sprout-wrap, with all of the available features.

      ${bldgrn}$(basename $0) -RFS${txtrst}
"
}

function pu-debug-help {

  printf "
$(pu-underline-header 'Debugging')

  -e expr     evaluate expression in the context of pullulant post loading.
              This can be useful if you are developing / debugging the code.

  For example, it allows you to evaluate any function that 'pu' loads into the
  bash space. Some examples – here we are evaluating library function
  pu-installers() which returns an array of all installers found in the folder.

              ${bldgrn}$(basename $0) -e pu-installers${txtrst}

  Next, we can print every pu- related function loaded into memory:

              ${bldgrn}$(basename $0) -e 'set | grep \"^pu-\"'${txtrst}

"
}
