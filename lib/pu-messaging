#!/usr/bin/bash env

source "${bash_files_dir}/.bash_colors"

function sep {
  printf "____________________________________________________________________________________\n" $1
}

function pu-indent-list {
  local list="$1"
  local width="$2"
  local indent="$3"
  echo "$list" | fold -sw $width | sed -E "s/ /, /g; s/(^|$)/${indent}/g; "
}

function pu-git-revision {
  git log --pretty=oneline --abbrev-commit | head -1 | awk '{print $1}'
}
function pu-long-header {
  printf " ___________________________________________________________________________________\n"
  printf "|                                                                                   |\n"
  printf "|  ${txtgrn}Pullulant (or gently: 'pu')                                       ${txtrst}üåπ  üåª  üçÑ  ü¶Ä  üéÉ  |\n"
  printf "|  ${txtylw}Development Environment Installer v${bldblu}$(cat VERSION).${txtwht}                                        |\n"
  printf "|  Git rev ${txtgrn}$(pu-git-revision).${txtwht}                                                                 |\n"
  printf "|___________________________________________________________________________________|\n"
  pu-installers-helpers
}

function pu-short-header {
  printf "${bldwht}\n"
  printf "${bldylw}Pullulant (aka 'pu'),  ${bldwht}Version $(cat VERSION), Ref $(pu-git-revision)\n\n"
  local runner_list=$(pu-indent-list "$runners"    70 '')
  printf "Run List: ${bldylw}${runner_list}${bldwht}\n"
  printf "Enabled Options: ${bldylw}"
  printf "${txtrst}"
  count=0
  for option in ${pu_options}; do
    option_value=$(pu_option_value $option)
    if [ -z "${option_value/ /}" ]; then
      continue
    else
      [[ $count -gt 0 ]] && printf ", "
      if [ "$option_value" == "yes" ]; then
        printf "${bldgrn}%s" ${option/opts_/}
      else
        printf "${bldgrn}%s=${bldylw}%s" ${option/opts_/} ${option_value}
      fi
    fi
    count=$(($count + 1))
  done
  printf "\n"
}

function pu-installers-helpers {
  local installer_list=$(pu-indent-list "$installers" 70 '   ')
  local helper_list=$(pu-indent-list "$helpers"    70 '   ')

  printf "                                                                                    \n"
  printf "Installers:\n"
  printf "${txtylw}%-68s ${txtrst}\n" "$installer_list"
  printf "                                                                                    \n"
  printf "Helpers:\n"
  printf "${txtylw}%-68s ${txtrst}\n" "$helper_list"
  printf "                                                                                    \n"

  pu-list-current-runners
}

function pu-list-current-runners {
  linebreak="\n"
  local run_list=$(pu-indent-list "$runners"    70 '   ')
  if [ ! -z "$(echo $run_list | sed 's/[ \n]//g')" ]; then
    printf "Run List:\n"
    printf "${bldylw}%-68s ${txtrst}\n" "$run_list"
  fi
}

function pu-welcome-screen-short {
  pu-long-header
  printf "\n${txtrst}"
}

function pu-print-section-header {
  [[ -n "${opts_suppress_headers}" ]] && return

  printf "${bldblu}                             ___________________________\n"
  printf "${bldblu}____________________________|${bldwht}${bakblu} %12s %-12s ${txtrst}|____________________________${txtrst}\n\n" "installing" $1
}

function pu-print-help {
  printf "Usage: ./$(basename $0) -a [-S] [-B] [-n|-q|-v|-p]\n"
  printf "       ./$(basename $0) -r 'runner1 runner2 ...' [-S] [-B] [-n|-q|-v]\n"
  printf "       ./$(basename $0) -r homebrew [-L|-R|-F|-C|-f] [-n|-q|-v]\n"
  printf "   Or: ./$(basename $0) [-l] [-h|-H|-x]\n\n"
  printf "
Where, runner is either an installer or a helper.

  -a          run [a]ll installers in order
  -r runner   run only a specified [r]unner (either helper or installer)
  -S          [S]proutwrap is disabled during the install
  -B          [B]rew-upgrade is disabled

Homebrew ‚Äì by default all three -L, -C, -F are on, unless at least one is set
with the flags.
  -L          [L]ink packages configured for brew linking
  -C          [C]asks are installed from a configured list
  -F          [F]ormulas are installed from a configured list

  -R          [R]einstall each formulae during brew install
  -K          Relin[K] all brew packages/casks during install
  -f          [F]orce all brew commands with --force

Output:
  -p          su[p]press pu-print-section-header headers for more compact output
  -q          [q]uiet mode: stop printing commands before and after run.
  -v          [v]erbose run show command's output, and add -v to some
  -n          dry-ru[n] ‚Äì¬†print commands, but don't actually run them.

Information:
  -l          [l]ists available runners ‚Äì helpers and installers
  -h          this [h]elp message
  -H          this help message, and explanation of helpers and installers
  -X          same as -H but in plain ascii (also saves into doc/help)

Examples:
    ./$(basename $0) -a                          # install everything
    ./$(basename $0) -r reinstall-postgres       # run just reinstall-postgres
    ./$(basename $0) -rf 'brew-wipe homebrew'    # wipe and reinstall homebrew
    ./$(basename $0) -aSB                        # install everything, minus
                                            # homebrew and sprout-wrap
"
}

function pu-print-detailed-usage {
  printf "
  Runner:
      Most common usage is with the ${bldlw}-a ${txtrst} flag, that runs all installers.
      Installers are bash modules located in the ${modules_dir} folder. Each
      installer has a bash function that matches the name of the file.

      The -r flag can be supplied more than once, or once but with multiple
      arguments in quotes, eg ${bldylw}-r 'runner1 runner2'${txtrst} or ${bldylw}-r runner1
      -r runner2${txtrst}. Presence of this flag indicates that only specified
      runnings will run.

  Helpers
      Helpers are similar to installers, but they are not ordered, and are
      not included in the default install. They are meant to be used ad-hoc.

      Eg, to wipe out existing PostgreSQL and re-run the installer
      do this below. This may be necessary when installing on an existing
      machine with an outdated or broken PostgreSQL:
"
}
