#!/usr/bin/env bash
#_______________________________________________________________________________
#
# (c) 2016 Konstantin Gredeskoul
# https://github.com/kigster
#
# For project Pullulant
# https://github.com/kigster/pullulant/
#
# MIT License
#_______________________________________________________________________________
# encoding: UTF-8

function check_exit {
  local cmd=$1
  local ignore_error=${2-""}
  local cmd_prints=  # 'yes' if the command actually meant to output something, null otherwise
  local cmd_verbose= # 'yes' if the verbose flag is passed, or "#show-stdout" comment included
  local cmd_quiet=   # 'yes' if globally quiet, or command passed #hide-command command
  local out=

  out=$(echo "$cmd" | egrep -c 'echo|printf')
  [[ $? -eq 0 ]]             && cmd_prints=yes

  out=$(echo "$cmd" | egrep -c 'hide-command')
  [[ $? -eq 0 ]]             && cmd_quiet=yes
  [[ -n "${opts_quiet}" ]]   && cmd_quiet=yes

  out=$(echo "$cmd" | egrep -c 'show-stdout')
  [[ $? -eq 0 ]]             && cmd_verbose=yes
  [[ -n "${opts_verbose}" ]] && cmd_verbose=yes

  # print the user-visible info about the command, if any
  if [ -z "${cmd_prints}" -a -z "${cmd_quiet}" ]; then
    if [ -z "${cmd_verbose}" ]; then
      printf "${bldpur}%-75.75s ${bldylw}→" "$cmd" | tee -a ${const_cmd_stdout}
    else
      printf "${bldpur}%s${txtrst}\n" "$cmd" | tee -a ${const_cmd_stdout}
    fi
  fi

  # print the actual STDOUT if present, or nothing when captured
  printf "${txtblu}"

  if [ -n "${cmd_prints}" ]; then
    eval "$cmd 2>${const_cmd_stderr}"
  elif [ -n "${cmd_verbose}" -a -z "${cmd_quiet}" ]; then
    eval "$cmd 2>${const_cmd_stderr}"
  else
    eval "$cmd 2>${const_cmd_stderr} 1>${const_cmd_stdout}"
  fi

  real_status=$?
  last_command_status=${real_status}

  if [ -n "${ignore_error}" -a $last_command_status -ne 0 ]; then
    last_command_status=0
    commands_ignored=$(($commands_ignored + 1))
  elif [  $last_command_status -ne 0  ]; then
    commands_failed=$(($commands_failed + 1))
  fi

  [[ $last_command_status -eq 0 ]] && commands_completed=$(($commands_completed + 1))

  if [ -n "${cmd_prints}" ]; then
    return $last_command_status
  fi

  if [ "$last_command_status" -eq 0 ]; then
    if [ -z "${cmd_quiet}" ]; then
      if [ -z "${cmd_verbose}" ]; then
        if [ $real_status -ne 0 ]; then
          printf "${var_pullulant_symbol_ignored}${txtrst}\n"
        else
          printf "${var_pullulant_symbol_ok}${txtrst}\n"
        fi
      fi
    fi
  else # error – print a little icon
    [[ -z "${cmd_verbose}" ]] && printf "${bldred}${var_pullulant_symbol_error}${txtrst}\n"
    [[ -s "${const_cmd_stderr}" ]] && printf "\n${txtred}$(cat ${const_cmd_stderr})${txtrst}\n"

    [[ "${opts_continue_on_statement_error}" == "yes" ]] && {
      cat ${const_cmd_stderr} >> ${const_combined_stderr}
      last_command_status=0
      return 0
    }

    printf "\n"
    printf "${txtrst}  Command: ${bldred}${cmd}\n"
    printf "${txtrst}Exit code: ${bldred}$last_command_status\n"
    printf "${txtrst}   Result: ${bldred}${runner}\n\n"

    [[ "${opts_continue_on_runner_error}" == "yes" ]] && {
      printf "${bldred}ERROR: ${bldwht}runner ${runner} must abort!!"
      runners_aborted=$(($runners_aborted + 1))
      kill -USR1 $$
    }
    [[ "${opts_continue_on_runner_error}" == "yes" ]] || abort
  fi

  return $last_command_status
}

function on_start {
  run "sudo rm -f ${const_cmd_stdout} ${const_cmd_stderr} # hide-command"
  [[ "$sudoers_enabled" ]] && pu-print-section-header "sudo-enable" && sudo-enable
}

function success {
  printf "${txtblk}"
  sep "\n\n"
  printf "\n 😃   ${bldgrn}Everything is awesome.${txtblk} \n"
  sep
  printf "\n${txtrst}"
}

function abort {
  [[ "$sudoers_enabled" ]] && sudo-disable
  on_exit && failure
  cd ${original_dir}
  exit $*
}
function failure {
  printf "${txtblk}"
  sep "\n\n"
  printf "\n ⛔️    ${bldred}Too bad :( ${txtblk}\n"
  sep
  printf "\n${txtrst}"
}

function on_exit {
  [[ "$sudoers_enabled" ]] && sudo-disable
  rm -rf ${const_cmd_stderr} # hide-command"
  rm -rf ${const_cmd_stdout} # hide-command"
  return 1
}

function finish {
  exit_last_command_status=${1-0}
  on_exit && success
  cd ${original_dir}
  exit ${exit_status}
}

#———————————————————————————————————————————————————————————————————————————————
# array=("something to search for" "a string" "test2000")
# array-contains-element "a string" "${array[@]}"
# ( prints "true" or "false" )
function array-contains-element () {
  local e
  local r=false
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && r=true; done
  echo -n $r
}

function uppercase-first-letter() {
  foo=$1
  foo="$(tr '[:lower:]' '[:upper:]' <<< ${foo:0:1})${foo:1}"
  echo -n $foo
}
function run {
  cmd=$1
  ignore_error=${2-""}
  last_command_status=0
  if [ ! -z "${opts_dryrun}" ]; then
    [[ "${cmd}"  =~ "printf" ]]  && eval "$cmd 2>${const_cmd_stderr}"
    [[ "${cmd}"  =~ "printf" ]]  || printf "[opts_dryrun]  ${txtgrn}${cmd}${txtrst}\n"
  else
    check_exit "$cmd" $ignore_error
  fi
  return $last_command_status
}
