#!/usr/bin/env bash
function pu-features {
  ls features
}


function pu-list-components {
  local name=$1
  shift
  local color=$1
  shift

  bgcolor="bak${color}"  && bgcolor=${!bgcolor}
  bldcolor="bld${color}" && bldcolor=${!bldcolor}
  fgcolor="txt${color}"  && fgcolor=${!fgcolor}

  declare -a components=("$*")
  printf "${txtwht}${fgcolor}%15.15s${txtrst}" "${name}"
  local count=0
  for component in ${components[@]}; do
    (("${count}" == "0")) && printf "%10.10s" " "
    (("${count}"  > "0")) && printf "%25.25s" " "
    printf "${fgcolor} ● ${txtblk}${bgcolor} %-30s ${fgcolor} ● ${txtrst}\n" ${component}
    count=$(($count + 1))
  done
  echo
}

function package-config {
  declare -a features=(default ${opts_features})
  for feature in "${features[@]}"; do
    local feature_with_path=$(echo $feature | grep  '/')
    if [ "${feature_with_path}" != "${feature}" ]; then
      package_file="${pu_home}/features/${feature}/packages"
    else
      package_file="$feature"
    fi
    if [ -s "${package_file}" ]; then
      source ${package_file}
    else
      printf "${bldred}ERROR: Unable to find feature ${feature}: ${bldwht}${package_file} does not exist?${txtrst}\n\n" >&2
      abort 131
    fi
  done

  pu-list-components "Features" "grn"  "${features[@]}"
  pu-list-components "Runners"  "ylw"  "${runners[@]}"

  source "${pu_home}/lib/pu-uniq-packages"

  if [[ -n "${opts_interactive}" ]]; then
    printf "\n${txtwht}   ${undylw}Attention:${txtrst} Please review the run parameters above.\n   If something is wrong or missing, hit Ctrl-C to abort.\n\n"
    if [ -t 0 ]; then stty -echo -icanon -icrnl time 0 min 0; fi
    keypress=''
    for wait in {20..1}; do
      keypress="`cat -v`"
      printf "\033[1000D\033[0C  You have ${bakred} ${wait} ${txtrst} seconds until start. ${bldgrn} Press ANY key to continue.${txtrst}"
      sleep 1
      keypress="`cat -v`"
      if [ "x$keypress" != "x" ]; then
        echo
        break
      fi
    done
    if [ -t 0 ]; then stty sane; fi
    clear
  fi
}

function pu-print-options {
  declare -a options_array=()
  local count=0
  header_printer=""
  for option in ${pu_options}; do
    [[ "$option" == "opts_features" ]] && continue
    option_value=$(pu_option_value $option)
    if [[ -n "${option_value/ /}" ]]; then
      #[[ -z "${header_printed}" ]] && header_printed="true" && printf "   ${txtwht}${bldblu}Enabled Options:\n      ${bldgrn}"
      #[[ $count -gt 0 ]] && printf ", "
      if [[ "$option_value" == "yes" ]]; then
        item="${option/opts_/}"
      else
        item="${option/opts_/} ⟼ ${option_value}"
      fi
      options_array=("${options_array[@]}" $item)
      count=$(($count + 1))
    fi
  done

  [[ "${#options_array[@]}" -gt 0 ]] && pu-list-components "Options" "blu" "${options_array[@]}"
}
