#!/usr/bin/env bash
#_______________________________________________________________________________
#
# (c) 2016 Konstantin Gredeskoul
# https://github.com/kigster
#
# For project Pullulant
# https://github.com/kigster/pullulant/
#
# MIT License
#_______________________________________________________________________________
# encoding: UTF-8

# usage: require <folder>  # containing modules named "xxx.." or NN_xxx.." where NN
                           # is an integer. Allows sorting installers by the
                           # deliberate order.
function require_dir {
  subfolder=$1
  submodules=$(echo $(ls -1 ${subfolder}))
  for submodule in ${submodules}; do
    local file="${subfolder}/${submodule}"
    [[ -n $DEBUG ]] && printf "sourcing ${txtblu}${file}${reset}...\n"
    source ${file}
    if [[ $(grep -c 'sudo' ${file}) -gt 0 ]]; then
      if [[ ${subfolder} =~ 'install' ]]; then
        installer_sudo_map[${submodule/[0-9][0-9]_/}]=yes
      else
        installer_sudo_map[${submodule}]=yes
      fi
    fi
  done
}

function pu-installers() {
  ls -1 $modules_dir | sed -E 's/[0-9]*_//g'
}

function pu-helpers() {
  ls -1 $helpers_dir
}

function pu-all-runnables() {
  printf "$(pu-installers) $(pu-helpers)" | tr '\n' ' '
  echo
}

function init {
  source "lib/pu.bash"

  require_dir "${helpers_dir}"
  require_dir "${modules_dir}"

  export installers=$(pu-installers | tr '\n' ' ' | sed 's/ *$//g')
  export helpers=$(pu-helpers | tr '\n' ' ' | sed 's/ *$//g')
  export last_command_status=0
}

function pu-is-valid-runner {
  declare -a all_runners=($(pu-all-runnables))
  echo -n $(pu-array-contains-element "$1" "${all_runners[@]}")
}

init
