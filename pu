#!/usr/bin/env bash
#_______________________________________________________________________________
#
# © 2016 Konstantin Gredeskoul
# Project Pullulant™
# https://github.com/kigster/pullulant/
#
# Distributed under MIT License
#_______________________________________________________________________________
#

function setup {
  export original_dir=$(pwd)
  export pu_home="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
  cd ${pu_home}
  source "lib/pu-loader"
}


function help-command() {
  pu-welcome-screen-short
  pu-print-help
}

setup
opts_features=""

while getopts "aAr:SBPLiIRKFCfqnvlhHxpZTt:" opt; do
  case $opt in
    a)
      export runners=${installers}  ;;
    A)
      export opts_features=$(pu-features)   ;;
    r)
      [[ "${OPTARG}" == "sudo-enable"  ]] && export skip_sudo_disable=true
      [[ "${OPTARG}" == "sudo-disable" ]] && export sudoers_enabled=true
      if [ "${#runners}" -eq 0 ]; then
        runners="$OPTARG"
      else
        runners+=" $OPTARG"
      fi                                    ;;

    #========================= Features     =========================

    t)
      export opts_features+=" $OPTARG "     ;;
    T)
      pu-list-features
      finish;                               ;;
    #========================= Runner Stuff =========================

    S)
      export opts_skip_sprout_wrap=yes      ;;
    B)
      export opts_skip_brew_upgrade=yes     ;;
    f)
      export opts_force=" --force "         ;;
    I)
      export opts_continue_on_runner_error=yes       ;;
    i)
      export opts_continue_on_statement_error=yes    ;;
    P)
      export opts_rsync_backup=             ;;

    #========================= Home Brew ============================

    F)
      export opts_brew_formulae_only=yes    ;;
    C)
      export opts_brew_casks_only=yes       ;;
    L)
      export opts_brew_link_only=yes        ;;
    R)
      export opts_brew_reinstall=yes        ;;
    K)
      export opts_brew_link_force=yes       ;;

    #========================= Other          =======================

    Z)
      export opts_change_shell_to_zsh=yes     ;;

    #========================= Output Control =======================
    p)
      export opts_suppress_headers=yes      ;;
    q)
      export opts_quiet=yes                 ;;
    n)
      export opts_dryrun=yes                ;;
    v)
      export opts_verbose=" -v ";           ;;

    #========================= Help and Info ========================

    x)
      ./$0 -h | iconv -c -t ascii | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g" > doc/help
      cat doc/help; finish;                 ;;
    h)
      printf "$(help-command)" | less -R
      exit 0
      ;;
    H)
      help-command
      exit 0
      ;;
    l)
      pu-short-header
      pu-installers-helpers
      finish;                               ;;
    \?)
      pu-print-help
      printf "${bakred}ERROR: $* is an invalid option :( ${txtrst}\n" >&2
      abort 126
      ;;
    :)
      printf "${bakred}ERROR: option -$opt requires an argument ${txtrst}\n" >&2
      abort 127
    ;;
  esac
done

function continue_next_runner() {
  run_runners "${runners_list[@]}"
}

trap USR1 continue_next_runner 2>/dev/null

function run_runners() {
  while (( "$#" )); do
    runner=$1
    # my arrays start with a 1
    runners_started=$((runners_started + 1))

    [[ $runners_started -eq 1 ]] && pu-short-header

    # I so much rather prefer dashes in the function and file names than underscores.
    # Dashes just feel like a continuation. Underscores are from another era. Jurassic.
    pu-print-section-header ${runner}

    export runner_status=0
    eval ${runner}
    runner_status=${runner_status:-1}

    if [ ${runner_status} -ne 0 ]; then
      printf "${bldred}error: runner ${bldred}${runner}${bldwht} exited with status: ${bakred} ${runner_status} ${txtrst}\n"
      [[ ${opts_continue_on_runner_error} ]] || abort $runner_status
      printf "${bldgrn}       ignoring error due to the flag set.${txtrst}\n"
      runners_ignored=$((runners_ignored + 1))
    else
      runners_completed=$(($runners_completed + 1))
    fi
    shift
    declare -a runners_list=$@
  done
}

function main {
  # Load package definitions based on the <-t template> setting.
  package-config

  # loop over installers, and if either passed as an argument or no arguments
  #" at all – run it."

  # By now we should have $runners set to either the whole set of installers
  # or to something specific passed via the flag. It should not be blank.
  [[ -z "${runners}" ]] || on_start

  export runners_started=0
  export runners_ignored=0
  export runners_completed=0
  export runners_aborted=0

  export commands_failed=0
  export commands_completed=0
  export commands_ignored=0

  declare -a runners_list=($runners)

  continue_next_runner

  printf "\n"
  [[ ${runners_completed} -gt 0 ]]  && printf "${bldwht}%5d${bldgrn} runners succeeded\n" $runners_completed
  [[ ${runners_ignored} -gt 0 ]]    && printf "${bldwht}%5d${bldylw} runners failed, but were ignored\n"  $runners_ignored
  pu-sep
  [[ ${commands_completed} -gt 0 ]] && printf "${bldwht}%5d${bldgrn} commands ran successfully\n" $commands_completed
  [[ ${commands_ignored} -gt 0 ]]   && printf "${bldwht}%5d${bldylw} commands had non-zero exit status, but were ignored\n" $runners_ignored
  [[ ${commands_failed} -gt 0 ]]    && printf "${bldwht}%5d${bldred} commands failed\n"  $commands_failed
  echo
  [[ $runner_status -eq 0 && $runners_completed -gt 0 ]] && finish
  [[ $runners_started -eq 0 ]] && {
    printf "${bldylw}\nNo runners were specified.${txtrst}\nPlease run $0 -h for help.\n"
    finish
  }
  [[ $runner_status -ne 0 && -z "${opts_continue_on_runner_error}" ]] && abort $last_command_status
  finish
}

#______________________________________________________________________________
#
export args=$*

main args

# EOF
