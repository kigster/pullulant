#!/usr/bin/env bash
#_______________________________________________________________________________
#
# (c) 2016 Konstantin Gredeskoul
# https://github.com/kigster
#
# For project Pullulant
# https://github.com/kigster/pullulant/
# Portions of this code were developed with sponsorship from GoShippo.com
#
# MIT License
#_______________________________________________________________________________
#

function load_module {
  submodules=$(echo `$1`)
  for submodule in $submodules; do
    source ${2}/$submodule
  done
}

function init {
  source "lib/pu.bash"

  load_module "ls -1 $helpers_dir" $helpers_dir
  export helpers=${submodules}

  load_module "ls -1 $modules_dir" $modules_dir
  export installers=$(echo $submodules | sed -E 's/[0-9]+_//g')
  export status=0
}

init

function main {
  # loop over installers, and if either passed as an argument or no arguments
  #" at all – run it."
  [[ -z "${runners}" ]] || on_start

  local runners_started=0
  local runners_completed=0

  for runner in $runners; do
    export runners_started=$((runners_started + 1))

    [[ $runners_started -eq 1 ]] && {
      pu-short-header
    }

    pu-print-section-header ${runner}

    export status=
    eval ${runner}
    status=${status:-1}

    if [ ${status:-1} -ne 0 ]; then
      printf "${bldred}Non-zero status ${status} from '${runner}' runner :( ...\n${txtrst}"
      abort $status
    fi

    runners_completed=$(($runners_completed + 1))
  done

  if [ $status -eq 0 -a $runners_completed -gt 0 ]; then
    finish
  elif [ $status -eq 0 -a $runners_completed -eq 0 ]; then
    printf "${bldylw}\nNo runners were specified.${txtrst}\nPlease run $0 -h for help.\n"
    finish
  else
    abort $status
  fi
}

#______________________________________________________________________________
#

while getopts "ar:SBLRKFCfqnvlhHxpZ" opt; do
  case $opt in
    a)
        export runners=${installers}          ;;
    r)
        [[ "${OPTARG}" == "sudo-enable"  ]] && export skip_sudo_disable=true
        [[ "${OPTARG}" == "sudo-disable" ]] && export sudoers_enabled=true
        if [ -z "$runners" ]; then
          export runners="$OPTARG"
        else
          export runners="$runners $OPTARG"
        fi                                    ;;

    #========================= Runner Stuff =========================

    S)
        export opts_skip_sprout_wrap=yes      ;;
    B)
        export opts_skip_brew_upgrade=yes     ;;

    #========================= Home Brew ============================

    F)
        export opts_brew_formulae_only=yes    ;;
    C)
        export opts_brew_casks_only=yes       ;;
    L)
        export opts_brew_link_only=yes        ;;
    R)
        export opts_brew_reinstall=yes        ;;
    K)
        export opts_brew_force_link=yes       ;;
    f)
        export opts_brew_force=" --force "    ;;

    #========================= Other          =======================

    Z)
        export opts_dont_change_shell=yes     ;;

    #========================= Output Control =======================
    p)
        export opts_suppress_headers=yes      ;;
    q)
        export opts_quiet=yes                 ;;
    n)
        export opts_dryrun=yes                ;;
    v)
        export opts_verbose=" -v ";           ;;

    #========================= Help and Info ========================

    x)
        ./$0 -H | iconv -c -t ascii | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g" > doc/help
        cat doc/help; finish;                 ;;
    h)
        pu-welcome-screen-short
        pu-print-help
        finish;                               ;;
    H)
        pu-welcome-screen-short
        pu-print-help
        pu-print-detailed-usage
        finish;                               ;;

    l)
        pu-short-header
        pu-installers-helpers
        finish;                               ;;
    \?)
        pu-print-help
        printf "${bakred}ERROR: $* is an invalid option :( ${txtrst}\n" >&2
        abort 126
        ;;
    :)
        printf "${bakred}ERROR: option -$opt requires an argument ${txtrst}\n" >&2
        abort 127
        ;;
  esac
done


export args=$*

main args
